MIR for function: DefId(0:3 ~ demo[e912]::main)
bb0: BasicBlockData {
    statements: [
        StorageLive(_1),
        _1 = const 1_i32,
        FakeRead(ForLet(None), _1),
        StorageLive(_2),
        _2 = const 2_i32,
        FakeRead(ForLet(None), _2),
        StorageLive(_3),
        _3 = const "apple",
        FakeRead(ForLet(None), _3),
        StorageLive(_4),
        StorageLive(_5),
        StorageLive(_6),
        StorageLive(_7),
        StorageLive(_8),
        StorageLive(_9),
        _9 = [const "", const "", const "", const "\n"],
        _8 = &_9,
        _7 = &(*_8),
        StorageLive(_10),
        StorageLive(_11),
        StorageLive(_12),
        StorageLive(_13),
        StorageLive(_14),
        StorageLive(_15),
        _15 = &_1,
        _14 = &(*_15),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: demo.rs:5:15: 5:17 (#5),
                scope: scope[3],
            },
            kind: _13 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _14) -> [return: bb1, unwind: bb6],
        },
    ),
    is_cleanup: false,
}
bb1: BasicBlockData {
    statements: [
        StorageDead(_14),
        StorageLive(_16),
        StorageLive(_17),
        StorageLive(_18),
        _18 = &_2,
        _17 = &(*_18),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: demo.rs:5:17: 5:19 (#5),
                scope: scope[3],
            },
            kind: _16 = core::fmt::rt::Argument::<'_>::new_display::<i32>(move _17) -> [return: bb2, unwind: bb6],
        },
    ),
    is_cleanup: false,
}
bb2: BasicBlockData {
    statements: [
        StorageDead(_17),
        StorageLive(_19),
        StorageLive(_20),
        StorageLive(_21),
        _21 = &_3,
        _20 = &(*_21),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: demo.rs:5:19: 5:21 (#5),
                scope: scope[3],
            },
            kind: _19 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _20) -> [return: bb3, unwind: bb6],
        },
    ),
    is_cleanup: false,
}
bb3: BasicBlockData {
    statements: [
        StorageDead(_20),
        _12 = [move _13, move _16, move _19],
        StorageDead(_19),
        StorageDead(_16),
        StorageDead(_13),
        _11 = &_12,
        _10 = &(*_11),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: /rustc/92c6c03805408a1a261b98013304e9bbf59ee428/library/std/src/macros.rs:143:28: 143:61 (#5),
                scope: scope[3],
            },
            kind: _6 = std::fmt::Arguments::<'_>::new_v1::<4, 3>(move _7, move _10) -> [return: bb4, unwind: bb6],
        },
    ),
    is_cleanup: false,
}
bb4: BasicBlockData {
    statements: [
        StorageDead(_10),
        StorageDead(_7),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: /rustc/92c6c03805408a1a261b98013304e9bbf59ee428/library/std/src/macros.rs:143:9: 143:62 (#4),
                scope: scope[3],
            },
            kind: _5 = std::io::_print(move _6) -> [return: bb5, unwind: bb6],
        },
    ),
    is_cleanup: false,
}
bb5: BasicBlockData {
    statements: [
        StorageDead(_6),
        StorageDead(_21),
        StorageDead(_18),
        StorageDead(_15),
        StorageDead(_12),
        StorageDead(_11),
        StorageDead(_9),
        StorageDead(_8),
        StorageDead(_5),
        _4 = const (),
        StorageDead(_4),
        _0 = const (),
        StorageDead(_3),
        StorageDead(_2),
        StorageDead(_1),
    ],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: demo.rs:6:2: 6:2 (#0),
                scope: scope[0],
            },
            kind: return,
        },
    ),
    is_cleanup: false,
}
bb6: BasicBlockData {
    statements: [],
    terminator: Some(
        Terminator {
            source_info: SourceInfo {
                span: demo.rs:1:1: 6:2 (#0),
                scope: scope[0],
            },
            kind: resume,
        },
    ),
    is_cleanup: true,
}
